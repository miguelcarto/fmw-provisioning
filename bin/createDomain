#!/bin/bash
###############################################################################
# File         : createDomain.sh
# Description  : 
#
# Author       : BPI
# Version      : 0.0.1
# Date         : 11-11-2015
# Requires Env :
#                
# Produces Env : 
#
###############################################################################

SCRIPT_PATH=`dirname $(readlink -f $0)`
SCRIPT_NAME=`basename $0`
SCRIPTS_HOME="$SCRIPT_PATH/.."

SCRIPTS_TMP=${SCRIPTS_HOME}/tmp
export SCRIPTS_TMP
export TEMPLATES_HOME=$SCRIPTS_HOME/templates

. $SCRIPTS_HOME/config/env.sh
. $SCRIPTS_HOME/functions/utils.sh
. $SCRIPTS_HOME/functions/pack.sh
. $SCRIPTS_HOME/functions/deployScripts.sh
. $SCRIPTS_HOME/functions/ldapActions.sh


###############################################################################
#
#
#
###############################################################################

function help() {
   echo "Usage: $SCRIPT_NAME"
}


###############################################################################
#
#
#
###############################################################################


function apply_log_rotate() {
   # copy template logrotate purgelogs
   cp $SCRIPTS_HOME/templates/logrotate/purgelogs.sh /opt/log/$BB_FULL_NAME
   sed -i -e "s/BB_FULL_NAME/${BB_FULL_NAME}/g" /opt/log/$BB_FULL_NAME/purgelogs.sh
   
   # copy logrotate info
   cp $SCRIPTS_HOME/templates/logrotate/logrotate /opt/log/$BB_FULL_NAME
   sed -i -e "s/BB_FULL_NAME/${BB_FULL_NAME}/g" /opt/log/$BB_FULL_NAME/logrotate
   
   # set crontab entry
   echo "10 2 * * * /usr/sbin/logrotate -s /opt/log/${BB_FULL_NAME}/logrotate.status /opt/log/${BB_FULL_NAME}/logrotate
01 0 * * * /opt/log/${BB_FULL_NAME}/gziplogs.sh" >> /tmp/crontab

   crontab /tmp/crontab
   echo "Crontab entries installed"
}


###############################################################################
#
#
#
###############################################################################

function create_ohs_domain(){
   $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/createOHSDomain.py
   
   # Change nodemanager.properties SecureListener=false
   sed -i "s/SecureListener=true/SecureListener=false/" ${MIDDLEWARE_HOME}/../cfg/nodemanager/nodemanager.properties
   
   # copy start/stop scripts 
   DOMAIN_CONFIGURATION_HOME="${BUILDING_BLOCK_HOME}/cfg/sserver/domains/${TARGET_ENVIRONMENT}_${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME}"

   CUSTOM_MACHINE_HOME="${BUILDING_BLOCK_HOME}/cfg/nodemanager"
   cp $DOMAIN_CONFIGURATION_HOME/bin/startNodeManager.sh ${CUSTOM_MACHINE_HOME}
   cp $DOMAIN_CONFIGURATION_HOME/bin/stopNodeManager.sh ${CUSTOM_MACHINE_HOME}
   # change nodemanager home
   sed -i -e "/NODEMGR_HOME=.*/ s:NODEMGR_HOME=.*:NODEMGR_HOME=\"${CUSTOM_MACHINE_HOME}\":" ${CUSTOM_MACHINE_HOME}/startNodeManager.sh
   sed -i -e "/NODEMGR_HOME=.*/ s:NODEMGR_HOME=.*:NODEMGR_HOME=\"${CUSTOM_MACHINE_HOME}\":" ${CUSTOM_MACHINE_HOME}/stopNodeManager.sh

   #startup ohs
   echo 'Starting Instance.'
   nohup $DOMAIN_CONFIGURATION_HOME/bin/startNodeManager.sh >/dev/null 2>&1 &
   sleep 5
   $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/startOHSInstance.py
   
   relocate_ohs_logs ${TARGET_ENVIRONMENT}_${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME} ${COMPONENT_NAME}
      
   # deploy ohs startup scripts
   deploy_ohs_scripts ${COMPONENT_NAME}
   
   apply_log_rotate
   
   exit 0
}


###############################################################################
#
#
#
###############################################################################

function create_domain() {
   
   if [ "${INSTALL_TYPE}" == "COH" ]; then
      $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/createCoherenceDomain.py
   else
      $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/createDomain.py
   fi
   
   if [ $? -eq 0 ]; then
      if [ "${INSTALL_TYPE}" == "WLS" ]; then
         echo "No Extension needed. Created plain Domain"
      
      else
         case "${INSTALL_TYPE}" in
            INFRA) EXTEND_SCRIPT_NAME="$SCRIPTS_HOME/wlst/extendDomainInfra.py"
            ;;
            COH ) EXTEND_SCRIPT_NAME="$SCRIPTS_HOME/wlst/extendDomainCoherence.py"
            ;;
            SOA | BPM | BAM )  EXTEND_SCRIPT_NAME="$SCRIPTS_HOME/wlst/extendDomainSOA.py"
            ;;
            OSB )  EXTEND_SCRIPT_NAME="$SCRIPTS_HOME/wlst/extendDomainOSB.py"
            ;; 
            *) echo "Invalid Installation Type ${INSTALL_TYPE}"; exit 3
         esac
         
         $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $EXTEND_SCRIPT_NAME
         
         if [ "${INSTALL_TYPE}" == "COH" ]; then
            $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/setupCoherenceClusters.py
         fi
      fi
   else
      echo "Domain creation failed. Check log for more info."
      exit 2
      
   fi
   
   # setup custom properties
   DOMAIN_CONFIGURATION_HOME="${MIDDLEWARE_HOME}/../cfg/aserver/domains/${TARGET_ENVIRONMENT}_${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME}"
   setup_custom_environment

   # copy startNodemanager and update it
   MACHINE_NAME="mac_${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME}_00"
   CUSTOM_MACHINE_HOME="${BUILDING_BLOCK_HOME}/cfg/nodemanager/${MACHINE_NAME}"
   cp $DOMAIN_CONFIGURATION_HOME/bin/startNodeManager.sh ${CUSTOM_MACHINE_HOME}
   cp $DOMAIN_CONFIGURATION_HOME/bin/stopNodeManager.sh ${CUSTOM_MACHINE_HOME}
   # change nodemanager home
   sed -i -e "/NODEMGR_HOME=.*/ s:NODEMGR_HOME=.*:NODEMGR_HOME=\"${CUSTOM_MACHINE_HOME}\":" ${CUSTOM_MACHINE_HOME}/startNodeManager.sh
   sed -i -e "/NODEMGR_HOME=.*/ s:NODEMGR_HOME=.*:NODEMGR_HOME=\"${CUSTOM_MACHINE_HOME}\":" ${CUSTOM_MACHINE_HOME}/stopNodeManager.sh

   # create LDAP Schema
   LDAP_FILES_LOCATION=/tmp
   LDAP_TEMPLATES=${SCRIPTS_HOME}/templates/ldap
   create_OIDSchema

   #startup admin
   echo "Starting Admin Server"
   nohup ${CUSTOM_MACHINE_HOME}/startNodeManager.sh >/dev/null 2>/dev/null &
   sleep 10
   $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/startAdmin.py
 
   # deploy admin startup scripts
   deploy_scripts ${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME}_adm

   # relocate admin logs
   relocate_logs ${TARGET_ENVIRONMENT}_${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME} ${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME}_adm

   # apply all the post setup actions
   $SCRIPTS_HOME/tools/wlst.sh $SCRIPTS_HOME/config/environment.properties $SCRIPTS_HOME/wlst/domainPostSetup.py

   # Finally pack the domain
   DOMAIN_NAME="${FUNCTIONAL_BLOCK_NAME}_${BUILDING_BLOCK_NAME}"
   WEBLOGIC_HOME="${MIDDLEWARE_HOME}/wlserver"
   TEMPORARY_DIRECTORY="/tmp"

   pack_domain

   apply_log_rotate
}



###############################################################################
#
#
#
###############################################################################

if [ ! -d ${SCRIPTS_TMP} ]; then
   mkdir -p ${SCRIPTS_TMP}
fi

if [ ! -d ${MIDDLEWARE_HOME}/../cfg ]; then

   if [ "${INSTALL_TYPE}" == "OHS" ]; then
      create_ohs_domain
   else
      create_domain
   fi
   
else
   echo "Domain already created skipping..."
fi

echo 'Now go and secure the OVD and OID entries for the newly created domain'

###############################################################################
#
#
#
###############################################################################


